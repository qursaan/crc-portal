"""
Django settings for crc project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
#from celery import Celery

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

try:
    # get the directory where this file is
    ROOT = os.path.dirname(__file__) or '.'
    # move one step up
    ROOT = os.path.realpath(ROOT + '/..')
    # print "qursaan",ROOT
except:
    # something is badly wrong here
    ROOT = None
    import traceback
    traceback.print_exc()

# assume we have ./static present already
# @qursaan
# HTTPROOT="/usr/share/unfold"
# the place to store local data, like e.g. the sqlite db
# @qursaan
# DATAROOT="/var/unfold"
# if not there, then we assume it's from a devel tree
# @qursaan
# if not os.path.isdir(os.path.join(HTTPROOT, "static")):
HTTPROOT = ROOT
DATAROOT = ROOT
AUTHROOT = os.path.join(HTTPROOT, "auth")

if not os.path.isdir(ROOT):
    raise Exception("Cannot find ROOT %s for unfold" % ROOT)
if not os.path.isdir(HTTPROOT):
    raise Exception("Cannot find HTTPROOT %s for unfold" % HTTPROOT)

# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!d2c&%9oqijgj8nfbjp+2m!hbyb08b36-j#tglpo*t02yh3=)b'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

####################
ADMINS = (
    # ('your_name', 'your_email@test.com'),
)

MANAGERS = ADMINS

# Mail configuration
DEFAULT_FROM_EMAIL = "root@crclab.org" # "root@theseus.ipv6.lip6.fr"
EMAIL_HOST_PASSWORD = "food"
EMAIL_HOST = "localhost"
EMAIL_PORT = 25
EMAIL_USE_TLS = False
SUPPORT_EMAIL = "qursaan@gmail.com"

ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course, use a different value.

ALLOWED_HOSTS = []

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#'django.template.loaders.eggs.Loader',
)

# Application definition
INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    #'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'insert_above',
    # our project
    'crc',
    # core of UI
    'manifold',
    'unfold',
    # plugins
    'plugins',
    # views
    'ui',
    'portal',
    #'djcelery',
)
#CELERY_RESULT_BACKEND=('djcelery.backends.database:DatabaseBackend',)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    #'auth.manifoldbackend.ManifoldBackend',
)

ROOT_URLCONF = 'crc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(HTTPROOT, "templates"),
                os.path.join(AUTHROOT, "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            #'builtins': ['insert_above.templatetags.insert_tags', ],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'crc.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Cairo' #'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Absolute filesystem path to the directory that will hold user-uploaded files.
# Example: "/home/media/media.lawrence.com/media/"
MEDIA_ROOT = ''

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = ''

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
STATIC_ROOT = os.path.join(HTTPROOT, 'static')

STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    # Thierry : we do not need to detail the contents
    # of our 'apps' since they're mentioned in INSTALLED_APPS
    os.path.join(AUTHROOT, "static"),
)

# Needed by PluginFinder
PLUGIN_DIR = os.path.join(ROOT, 'plugins')
# ThirdPartyFinder
THIRDPARTY_DIR = os.path.join(ROOT, 'third-party')

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    # Thierry : no need for this one
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'unfold.collectstatic.PluginFinder',
    'unfold.collectstatic.ThirdPartyFinder',
    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',
)


# A sample logging configuration. The only tangible logging
# performed by this configuration is to send an email to
# the site admins on every HTTP 500 error when DEBUG=False.
# See http://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
        },
        # 'file': {
        #    'level': 'DEBUG',
        #    'class': 'logging.FileHandler',
        #    'filename': '/path/to/django/debug.log',
        # },
    },
    'loggers': {
        'default': {
            'handlers': ['console'],
            'level': 'INFO',
            'filters': ['require_debug_false'],
        },
        'django': {
            'handlers': ['null'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        }
    },
}
